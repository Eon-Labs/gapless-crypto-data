name: Documentation Automation
'on':
  push:
    branches:
    - main
    - develop
  pull_request:
    branches:
    - main
  workflow_dispatch: {}
env:
  UV_SYSTEM_PYTHON: 1
jobs:
  documentation:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    - name: Install UV
      run: curl -LsSf https://astral.sh/uv/install.sh | sh
    - name: Add UV to PATH
      run: echo "$HOME/.local/bin" >> $GITHUB_PATH
    - name: Install dependencies
      run: uv venv && source .venv/bin/activate && uv sync --dev --extra docs
    - name: Run ultrathink documentation system
      run: source .venv/bin/activate && uv run python -m docs.ultrathink.cli validate
        --package gapless_crypto_data
  documentation-gating:
    runs-on: ubuntu-latest
    needs: documentation
    if: github.event_name == 'pull_request'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    - name: Install UV
      run: curl -LsSf https://astral.sh/uv/install.sh | sh
    - name: Add UV to PATH
      run: echo "$HOME/.local/bin" >> $GITHUB_PATH
    - name: Install dependencies
      run: uv venv && source .venv/bin/activate && uv sync --dev --extra docs
    - name: Check documentation completeness
      run: source .venv/bin/activate && uv run python -m docs.ultrathink.cli check-completeness
        --package gapless_crypto_data --threshold 0.95
    - name: Validate API changes
      run: source .venv/bin/activate && uv run python -m docs.ultrathink.cli diff
        --package gapless_crypto_data --base-ref ${ github.base_ref } --head-ref ${
        github.head_ref }
    - name: Check for new undocumented APIs
      run: source .venv/bin/activate && uv run python -m docs.ultrathink.cli check-new-apis
        --package gapless_crypto_data --base-ref ${ github.base_ref }
  documentation-feedback:
    runs-on: ubuntu-latest
    needs:
    - documentation
    - documentation-gating
    if: github.event_name == 'pull_request' && (success() || failure())
    permissions:
      pull-requests: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    - name: Install UV
      run: curl -LsSf https://astral.sh/uv/install.sh | sh
    - name: Add UV to PATH
      run: echo "$HOME/.local/bin" >> $GITHUB_PATH
    - name: Install dependencies
      run: uv venv && source .venv/bin/activate && uv sync --dev --extra docs
    - name: Generate documentation report
      run: source .venv/bin/activate && uv run python -m docs.ultrathink.cli generate-pr-report
        --package gapless_crypto_data --output docs_report.md
    - name: Comment PR with documentation report
      uses: actions/github-script@v6
      with:
        script: "\n                                const fs = require('fs');\n   \
          \                             const reportPath = 'docs_report.md';\n\n \
          \                               let report = '## \U0001F4DA Documentation\
          \ Report\\n\\nNo documentation report generated.';\n                   \
          \             if (fs.existsSync(reportPath)) {\n                       \
          \           report = fs.readFileSync(reportPath, 'utf8');\n            \
          \                    }\n\n                                // Find existing\
          \ comment\n                                const comments = await github.rest.issues.listComments({\n\
          \                                  owner: context.repo.owner,\n        \
          \                          repo: context.repo.repo,\n                  \
          \                issue_number: context.issue.number,\n                 \
          \               });\n\n                                const existingComment\
          \ = comments.data.find(comment =>\n                                  comment.body.includes('\U0001F4DA\
          \ Documentation Report')\n                                );\n\n       \
          \                         if (existingComment) {\n                     \
          \             // Update existing comment\n                             \
          \     await github.rest.issues.updateComment({\n                       \
          \             owner: context.repo.owner,\n                             \
          \       repo: context.repo.repo,\n                                    comment_id:\
          \ existingComment.id,\n                                    body: report\n\
          \                                  });\n                               \
          \ } else {\n                                  // Create new comment\n  \
          \                                await github.rest.issues.createComment({\n\
          \                                    owner: context.repo.owner,\n      \
          \                              repo: context.repo.repo,\n              \
          \                      issue_number: context.issue.number,\n           \
          \                         body: report\n                               \
          \   });\n                                }\n                            "
