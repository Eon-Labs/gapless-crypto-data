---
name: Publish to PyPI and TestPyPI

on:
  push:
    branches: [main]
  release:
    types: [published]

env:
  UV_SYSTEM_PYTHON: 1

jobs:
  build:
    name: Build distribution packages
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install UV
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Add UV to PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          uv venv
          source .venv/bin/activate
          uv sync --dev

      - name: Validate file encoding
        run: |
          echo "Checking file encoding (UTF-8/ASCII required)..."
          find src/ tests/ examples/ -name "*.py" -o -name "*.md" \
            -o -name "*.txt" -o -name "*.toml" -o -name "*.yml" \
            -o -name "*.yaml" 2>/dev/null | \
          xargs file --mime-encoding | grep -v -E "(utf-8|us-ascii)" && {
            echo "❌ Non-UTF-8/ASCII files found!"
            exit 1
          } || {
            echo "✅ All project text files are properly encoded"
          }

      - name: Lint with ruff
        run: |
          source .venv/bin/activate
          uv run ruff check .
          uv run ruff format --check .

      - name: Run tests
        run: |
          source .venv/bin/activate
          uv run pytest tests/ -v --tb=short

      - name: Test CLI entry point
        run: |
          source .venv/bin/activate
          uv run gapless-crypto-data --help

      - name: Build package
        run: |
          source .venv/bin/activate
          uv build

      - name: Store the distribution packages
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

  publish-to-testpypi:
    name: Publish to TestPyPI
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs:
      - build
    runs-on: ubuntu-latest

    environment:
      name: testpypi
      url: https://test.pypi.org/p/gapless-crypto-data

    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Publish distribution packages to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          verbose: true

  publish-to-pypi:
    name: Publish to PyPI
    if: github.event_name == 'release' && github.event.action == 'published'
    needs:
      - build
    runs-on: ubuntu-latest

    environment:
      name: pypi
      url: https://pypi.org/p/gapless-crypto-data

    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Publish distribution packages to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          verbose: true

  github-release:
    name: Sign with Sigstore and upload to GitHub Release
    if: github.event_name == 'release' && github.event.action == 'published'
    needs:
      - publish-to-pypi
    runs-on: ubuntu-latest

    permissions:
      contents: write  # IMPORTANT: mandatory for making GitHub Releases
      id-token: write  # IMPORTANT: mandatory for sigstore

    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Sign the dists with Sigstore
        uses: sigstore/gh-action-sigstore-python@v2.1.1
        with:
          inputs: >-
            ./dist/*.tar.gz
            ./dist/*.whl

      - name: Upload artifact signatures to GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: >-
          gh release upload
          '${{ github.ref_name }}' dist/**
          --repo '${{ github.repository }}'
