[project]
name = "gapless-crypto-data"
version = "2.2.0"
description = "Ultra-fast cryptocurrency data collection with zero gaps guarantee and full 11-column microstructure format"
readme = "README.md"
authors = [
    { name = "Eon Labs", email = "terry@eonlabs.ai" }
]
maintainers = [
    { name = "Terry Li", email = "terry@eonlabs.ai" }
]
license = { text = "MIT" }
keywords = [
    "cryptocurrency", "crypto", "binance", "data", "collection",
    "trading", "OHLCV", "gap-filling", "financial-data", "time-series",
    "microstructure", "order-flow", "liquidity", "taker-volume", "authentic-data"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12", 
    "Programming Language :: Python :: 3.13",
    "Topic :: Office/Business :: Financial :: Investment",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.9"
dependencies = [
    "pandas>=2.0.0",
    "requests>=2.25.0",
    "rich>=14.1.0",
]

[project.urls]
Homepage = "https://github.com/Eon-Labs/gapless-crypto-data"
Documentation = "https://github.com/Eon-Labs/gapless-crypto-data#readme"
Repository = "https://github.com/Eon-Labs/gapless-crypto-data.git"
Issues = "https://github.com/Eon-Labs/gapless-crypto-data/issues"
Changelog = "https://github.com/Eon-Labs/gapless-crypto-data/blob/main/CHANGELOG.md"

[project.scripts]
gapless-crypto-data = "gapless_crypto_data.cli:main"

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
]
docs = [
    "jinja2>=3.1.0",
    "pyyaml>=6.0",
    "toml>=0.10.2; python_version < '3.11'",
    "tomli>=1.2.0; python_version < '3.11'",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/gapless_crypto_data"]

[tool.hatch.version]
path = "src/gapless_crypto_data/__init__.py"

[tool.ruff]
target-version = "py39"
line-length = 100

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
]
ignore = [
    "E501",  # line too long, handled by black
    "C901",  # function too complex (legacy code)
    "F841",  # unused variables (test files)
    "W291",  # trailing whitespace
    "W293",  # blank line contains whitespace
]

[tool.ruff.lint.isort]
known-first-party = ["gapless_crypto_data"]

[tool.black]
target-version = ['py39']
line-length = 100

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
# Gradually improve type checking
disallow_untyped_defs = false
check_untyped_defs = true
warn_redundant_casts = true
warn_unused_ignores = true
no_implicit_optional = true
strict_optional = true

# Ignore missing imports for now
ignore_missing_imports = false

# Per-module configuration for gradual adoption
[[tool.mypy.overrides]]
module = [
    "gapless_crypto_data.cli",
    "gapless_crypto_data.__init__"
]
disallow_untyped_defs = true

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers"
testpaths = [
    "tests",
]
markers = [
    "integration: marks tests as integration tests (may require network access)",
]

[dependency-groups]
dev = [
    "mypy>=1.18.1",
    "pandas-stubs>=2.2.2.240807",
    "pre-commit>=4.3.0",
    "pytest>=8.4.2",
    "pytest-cov>=7.0.0",
    "ruff>=0.13.0",
    "types-requests>=2.32.4.20250913",
    "yamllint>=1.37.1",
]

[tool.ultrathink]
# Ultrathink Documentation Automation Configuration
enabled = true
package_name = "gapless_crypto_data"
source_directory = "src/gapless_crypto_data"

[tool.ultrathink.introspection]
enabled = true
include_private = false
include_internal = false
follow_imports = true
extract_signatures = true
extract_docstrings = true
extract_type_hints = true

exclude_patterns = [
    "*.sample_data.*",
    "*.__pycache__.*",
    "*.test*"
]

[tool.ultrathink.diffing]
enabled = true
track_breaking_changes = true
track_deprecations = true
track_additions = true
track_modifications = true

signature_changes = "strict"
docstring_changes = "moderate"
type_hint_changes = "strict"

snapshot_retention_days = 365
compress_snapshots = true

[tool.ultrathink.generation]
enabled = true
auto_generate_stubs = true
update_existing_docs = false
template_style = "numpy"

formats = ["markdown"]
markdown_output = "docs/ultrathink/storage/generated_docs/markdown"

include_examples = true
include_see_also = true

[tool.ultrathink.validation]
enabled = true
validate_doctests = true
validate_help_snapshots = true
check_completeness = true
check_consistency = true

doctest_mode = "strict"
help_snapshot_mode = "strict"
completeness_threshold = 0.95

cache_validation_results = true
cache_ttl_hours = 24

[tool.ultrathink.ci]
enabled = true
pre_commit_validation = true
github_actions_integration = true
gate_on_incomplete_docs = true
gate_on_failed_doctests = true

allow_draft_prs = false
require_maintainer_override = true
notification_channels = ["github_pr_comments"]

[tool.ultrathink.output]
base_output_dir = "docs/ultrathink/storage/generated_docs"
api_reference_dir = "api"
changelog_dir = "changes"
reports_dir = "reports"

use_module_hierarchy = true
flatten_structure = false
include_version_in_filename = false
